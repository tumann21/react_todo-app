{"version":3,"sources":["TodoContext.tsx","components/TodoApp.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodosFilter.tsx","App.tsx","index.tsx"],"names":["TodoContext","React","createContext","todo","setTodo","finishedTodos","setFinishedTodos","activeTodos","setActiveTodos","todoses","setVisibleTodoses","TodoProvider","children","useState","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","filter","elem","completed","contextValue","Provider","value","TodoApp","memo","useContext","title","setTitle","onSubmit","event","preventDefault","newTodo","id","Date","type","onChange","e","target","className","placeholder","TodoItem","el","focused","setFocused","editTodo","setEditTodo","updateTodo","map","classNames","editing","checked","onDoubleClick","onClick","ref","input","focus","onBlur","onKeyDown","key","TodoList","actTodo","length","handleToggleAll","htmlFor","TodosFilter","setType","href","selected","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f63b9874.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Todo } from './types';\n\ntype ContextProps = {\n  todo: Todo[],\n  setTodo: (todo: Todo[]) => void,\n  finishedTodos: Todo[],\n  setFinishedTodos: (todo: Todo[]) => void,\n  activeTodos: Todo[],\n  setActiveTodos: (todo: Todo[]) => void,\n  todoses: Todo[],\n  setVisibleTodoses: (todo: Todo[]) => void,\n};\n\nexport const TodoContext = React.createContext<ContextProps>({\n  todo: [],\n  setTodo: () => { },\n  finishedTodos: [],\n  setFinishedTodos: () => { },\n  activeTodos: [],\n  setActiveTodos: () => { },\n  todoses: [],\n  setVisibleTodoses: () => { },\n});\n\nexport const TodoProvider: React.FC = ({ children }) => {\n  const [todo, setTodo] = useState<Todo[]>(\n    JSON.parse(localStorage.getItem('todo') || '[]'),\n  );\n  const [todoses, setVisibleTodoses] = useState<Todo[]>([]);\n  const [finishedTodos, setFinishedTodos] = useState<Todo[]>([]);\n  const [activeTodos, setActiveTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    localStorage.setItem('todo', JSON.stringify(todo));\n\n    setFinishedTodos(todo.filter(elem => elem.completed));\n    setActiveTodos(todo.filter(elem => !elem.completed));\n  }, [todo]);\n\n  const contextValue = {\n    todo,\n    setTodo,\n    finishedTodos,\n    setFinishedTodos,\n    activeTodos,\n    setActiveTodos,\n    todoses,\n    setVisibleTodoses,\n  };\n\n  return (\n    <TodoContext.Provider value={contextValue}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { TodoContext } from '../TodoContext';\nimport './TodoApp.scss';\n\nexport const TodoApp: React.FC = React.memo(() => {\n  const { todo, setTodo } = useContext(TodoContext);\n  const [title, setTitle] = useState('');\n\n  const todoCreate = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newTodo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    if (!newTodo.title) {\n      return;\n    }\n\n    setTodo([...todo, newTodo]);\n    setTitle('');\n  };\n\n  return (\n    <form onSubmit={todoCreate}>\n      <input\n        type=\"text\"\n        value={title}\n        onChange={(e) => {\n          setTitle(e.target.value);\n        }}\n        className=\"new-todo\"\n        data-cy=\"createTodo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n});\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { TodoContext } from '../TodoContext';\nimport { Todo } from '../types';\n\ntype Props = {\n  el: Todo,\n}\n\nexport const TodoItem: React.FC<Props> = ({ el }) => {\n  const { todo, setTodo } = useContext(TodoContext);\n  const [focused, setFocused] = useState(false);\n  const [editTodo, setEditTodo] = useState(el.title);\n\n  const updateTodo = () => {\n    setTodo(todo.map((elem) => {\n      if (elem.id === el.id) {\n        return {\n          ...elem,\n          title: editTodo,\n        };\n      }\n\n      return elem;\n    }));\n  };\n\n  const handledoubleClick = () => {\n    setFocused(true);\n  };\n\n  const handleClick = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      setFocused(false);\n      updateTodo();\n    }\n\n    if (event.key === 'Escape') {\n      setEditTodo(el.title);\n      setFocused(false);\n    }\n  };\n\n  const destroyItem = (id: number) => {\n    setTodo(todo.filter(elem => elem.id !== id));\n  };\n\n  const handleInputTodo = (id: number) => {\n    setTodo(todo.map((elem) => {\n      if (elem.id === id) {\n        return {\n          ...elem,\n          completed: !elem.completed,\n        };\n      }\n\n      return elem;\n    }));\n  };\n\n  const handleOnBlur = () => {\n    setFocused(false);\n    updateTodo();\n  };\n\n  return (\n    <>\n      <li\n        key={el.id}\n        className={classNames({\n          completed: el.completed,\n          editing: focused,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            checked={el.completed}\n            onChange={() => handleInputTodo(el.id)}\n            className=\"toggle\"\n          />\n          <label\n            onDoubleClick={handledoubleClick}\n          >\n            {el.title}\n          </label>\n          <button\n            type=\"button\"\n            data-cy=\"deleteTodo\"\n            className=\"destroy\"\n            onClick={() => destroyItem(el.id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          id=\"editTodo\"\n          value={editTodo}\n          onChange={e => setEditTodo(e.target.value)}\n          className=\"edit\"\n          ref={input => input && input.focus()}\n          onBlur={handleOnBlur}\n          onKeyDown={handleClick}\n        />\n      </li>\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodoContext } from '../TodoContext';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList: React.FC = () => {\n  const { todo, setTodo } = useContext(TodoContext);\n  const { todoses } = useContext(TodoContext);\n\n  const actTodo = todo.filter(elem => !elem.completed);\n\n  const handleToggleAll = (e: boolean) => {\n    setTodo(todo.map((elem) => {\n      return {\n        ...elem,\n        completed: e,\n      };\n    }));\n  };\n\n  return (\n    <>\n      {todo.length !== 0 && (\n        <>\n          <input\n            type=\"checkbox\"\n            checked={actTodo.length === 0}\n            onChange={e => handleToggleAll(e.target.checked)}\n            id=\"toggle-all\"\n            data-cy=\"toggleAll\"\n            className=\"toggle-all\"\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        </>\n      )}\n\n      <ul\n        className=\"todo-list\"\n        data-cy=\"todoList\"\n      >\n        {todoses.map(el => (\n          <TodoItem\n            el={el}\n            key={el.id}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { TodoContext } from '../TodoContext';\n\nexport const TodosFilter: React.FC = () => {\n  const { todo, setTodo, finishedTodos } = useContext(TodoContext);\n  const { activeTodos, setVisibleTodoses } = useContext(TodoContext);\n  const [type, setType] = useState('all');\n\n  useEffect(() => {\n    switch (type) {\n      case 'active':\n        setVisibleTodoses(activeTodos);\n        break;\n      case 'completed':\n        setVisibleTodoses(finishedTodos);\n        break;\n      default:\n        setVisibleTodoses(todo);\n    }\n  }, [type, todo]);\n\n  return (\n    <>\n      {todo.length > 0 && (\n        <>\n          <footer className=\"footer\">\n            <span\n              data-cy=\"todosCounter\"\n              className=\"todo-count\"\n            >\n              {`${activeTodos.length} items left`}\n            </span>\n\n            <ul className=\"filters\">\n              <li>\n                <a\n                  href=\"#/\"\n                  className={classNames({ selected: type === 'all' })}\n                  onClick={() => setType('all')}\n                >\n                  All\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/active\"\n                  className={classNames({ selected: type === 'active' })}\n                  onClick={() => setType('active')}\n                >\n                  Active\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/completed\"\n                  className={classNames({ selected: type === 'completed' })}\n                  onClick={() => setType('completed')}\n                >\n                  Completed\n                </a>\n              </li>\n            </ul>\n\n            {finishedTodos.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setTodo(activeTodos)}\n              >\n                Clear completed\n              </button>\n            )}\n\n          </footer>\n        </>\n      )}\n\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodoProvider } from './TodoContext';\nimport { TodosFilter } from './components/TodosFilter';\n\nconst App: React.FC = () => {\n  return (\n    <TodoProvider>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoApp />\n        </header>\n\n        <section className=\"main\">\n          <TodoList />\n        </section>\n\n        <TodosFilter />\n      </section>\n    </TodoProvider>\n  );\n};\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}